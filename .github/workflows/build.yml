name: ci/gh-actions/cli

on: [push, pull_request]

action_checkout: &ACTION_CHECKOUT
  uses: actions/checkout@v1
  with:
    submodules: recursive

env_unix: &ENV_UNIX
  env:
    CCACHE_COMPRESS: 1
    CCACHE_TEMPDIR: /tmp/.ccache-temp

remove_boost: &REMOVE_BOOST
  name: remove bundled boost
  run: sudo rm -rf /usr/local/share/boost

apt_set_conf: &APT_SET_CONF
  name: set apt conf
  run: |
        echo "Acquire::Retries \"3\";" | sudo tee -a /etc/apt/apt.conf.d/80-custom
        echo "Acquire::http::Timeout \"120\";" | sudo tee -a /etc/apt/apt.conf.d/80-custom
        echo "Acquire::ftp::Timeout \"120\";" | sudo tee -a /etc/apt/apt.conf.d/80-custom

apt_update: &APT_UPDATE
  name: update apt
  run: sudo apt update

apt_install_linux: &APT_INSTALL_LINUX
  name: install monero dependencies
  run: sudo apt -y install build-essential cmake libboost-all-dev miniupnpc libunbound-dev graphviz doxygen libunwind8-dev pkg-config libssl-dev libzmq3-dev libsodium-dev libhidapi-dev libnorm-dev libusb-1.0-0-dev libpgm-dev libprotobuf-dev protobuf-compiler ccache

jobs:
  build-macos:
    runs-on: macOS-latest
    <<: *ENV_UNIX
    steps:
    - <<: *ACTION_CHECKOUT
    - uses: actions/cache@v2
      with:
        path: /Users/runner/Library/Caches/ccache
        key: ccache-macos-build-${{ github.sha }}
        restore-keys: ccache-macos-build-
    - name: install dependencies
      run: HOMEBREW_NO_AUTO_UPDATE=1 brew install boost hidapi zmq libpgm miniupnpc ldns expat libunwind-headers protobuf ccache
    - name: build
      run: |
        ccache --max-size=150M
        make -j3

  build-windows:
    runs-on: windows-latest
    env:
      CCACHE_COMPRESS: 1
      CCACHE_TEMPDIR: C:\Users\runneradmin\.ccache-temp
      CCACHE_DIR: C:\Users\runneradmin\.ccache
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - <<: *ACTION_CHECKOUT
    - uses: actions/cache@v2
      with:
        path: C:\Users\runneradmin\.ccache
        key: ccache-windows-build-${{ github.sha }}
        restore-keys: ccache-windows-build-
    - uses: eine/setup-msys2@v2
      with:
        update: true
        install: mingw-w64-x86_64-toolchain make mingw-w64-x86_64-cmake mingw-w64-x86_64-ccache mingw-w64-x86_64-boost mingw-w64-x86_64-openssl mingw-w64-x86_64-zeromq mingw-w64-x86_64-libsodium mingw-w64-x86_64-hidapi mingw-w64-x86_64-protobuf-c mingw-w64-x86_64-libusb git
    - name: build
      run: |
        ccache --max-size=150M
        make release-static-win64 -j2

  build-ubuntu:
    runs-on: ubuntu-latest
    <<: *ENV_UNIX
    steps:
    - <<: *ACTION_CHECKOUT
    - uses: actions/cache@v2
      with:
        path: ~/.ccache
        key: ccache-ubuntu-build-${{ github.sha }}
        restore-keys: ccache-ubuntu-build-
    - <<: *REMOVE_BOOST
    - <<: *APT_SET_CONF
    - <<: *APT_UPDATE
    - <<: *APT_INSTALL_LINUX
    - name: build
      run: |
        ccache --max-size=150M
        make -j3

  libwallet-ubuntu:
    runs-on: ubuntu-latest
    <<: *ENV_UNIX
    steps:
    - <<: *ACTION_CHECKOUT
    - uses: actions/cache@v2
      with:
        path: ~/.ccache
        key: ccache-ubuntu-libwallet-${{ github.sha }}
        restore-keys: ccache-ubuntu-libwallet-
    - <<: *REMOVE_BOOST
    - <<: *APT_SET_CONF
    - <<: *APT_UPDATE
    - <<: *APT_INSTALL_LINUX
    - name: build
      run: |
        ccache --max-size=150M
        cmake -DBUILD_GUI_DEPS=ON
        make -j3

  test-ubuntu:
    needs: build-ubuntu
    runs-on: ubuntu-latest
    <<: *ENV_UNIX
    steps:
    - <<: *ACTION_CHECKOUT
    - <<: *REMOVE_BOOST
    - <<: *APT_SET_CONF
    - <<: *APT_UPDATE
    - <<: *APT_INSTALL_LINUX
    - name: install requests
      run: pip install requests
    - name: tests
      env:
        CTEST_OUTPUT_ON_FAILURE: ON
      run: |
        ccache --max-size=150M
        DIR_BUILD="build/ci/release"
        DIR_SRC="`pwd`"
        mkdir -p "${DIR_BUILD}" && cd "${DIR_BUILD}"
        cmake -S "${DIR_SRC}" -D ARCH="default" -D BUILD_SHARED_LIBS=ON -D BUILD_TESTS=ON -D CMAKE_BUILD_TYPE=release && make -j3 && make test

# ARCH="default" (not "native") ensures, that a different execution host can execute binaries compiled elsewhere.
# BUILD_SHARED_LIBS=ON speeds up the linkage part a bit, reduces size, and is the only place where the dynamic linkage is tested.

